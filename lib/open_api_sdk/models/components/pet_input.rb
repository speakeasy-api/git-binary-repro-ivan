# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: false
# frozen_string_literal: true


module OpenApiSDK
  module Models
    module Components
    

      class PetInput
        
        include Crystalline::MetadataFields


        field :name, ::String, { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('name'), required: true } }

        field :photo_urls, Crystalline::Array.new(::String), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('photoUrls'), required: true } }

        field :category, Crystalline::Nilable.new(Models::Components::Category), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('category') } }

        field :tags, Crystalline::Nilable.new(Crystalline::Array.new(Models::Components::Tag)), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('tags') } }
        # pet status in the store - SPEC EDIT VERSION B
        field :status, Crystalline::Nilable.new(Models::Components::PetStatus), { 'format_json': { 'letter_case': ::OpenApiSDK::Utils.field_name('status'), 'decoder': Utils.enum_from_string(Models::Components::PetStatus, true) } }

        
        def initialize(name:, photo_urls:, category: nil, tags: nil, status: nil)
          @name = name
          @photo_urls = photo_urls
          @category = category
          @tags = tags
          @status = status
        end

        
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @name == other.name
          return false unless @photo_urls == other.photo_urls
          return false unless @category == other.category
          return false unless @tags == other.tags
          return false unless @status == other.status
          true
        end
      end
    end
  end
end
